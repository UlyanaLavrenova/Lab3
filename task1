
class Table:
    __mass = 0

    def __init__(self, mass):
        self.__mass = mass

    def get_mass(self):
        return self.__mass


class DinnerTable(Table):
    __places = 0

    def __init__(self, mass1 = 0):
        Table.__init__(self, mass1)
        self.__places = mass1 / 5

    def get_places(self, ):
        return self.__places


class Truck:
    __maxMass = 0

    def __init__(self, maxMass):
        self.__maxMass = maxMass

        self.__tables = []

    def get_maxMass(self):
        return self.__maxMass

    def __current_mass(self):
        s = 0
        for i in self.__tables:
            s += i.get_mass()
        return s

    def reserved_mass(self):
        return self.__maxMass - self.__current_mass()

    def add_table(self, new_table):
        if new_table.get_mass() < self.reserved_mass():
            self.__tables.append(new_table)
            print("Стол массой " + str(new_table.get_mass()) + " загружен в грузовик")
        else:
            print("Стол массой " + str(new_table.get_mass()) + " не может быть загружен в грузовик. Осталось " + str(self.reserved_mass()) + " кг")


newTable = [
    DinnerTable(10),
    DinnerTable(20),
    DinnerTable(30)]

newTruck = Truck(50)

newTruck.add_table(newTable[0])
newTruck.add_table(newTable[1])
newTruck.add_table(newTable[2])


